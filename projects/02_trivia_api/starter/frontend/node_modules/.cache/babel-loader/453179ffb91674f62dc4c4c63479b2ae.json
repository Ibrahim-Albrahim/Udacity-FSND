{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\3nwan\\\\Documents\\\\GitHub\\\\FSND\\\\projects\\\\02_trivia_api\\\\starter\\\\frontend\\\\src\\\\components\\\\QuestionView.js\";\nimport _ from 'lodash';\nimport React, { Component } from 'react';\nimport '../stylesheets/App.css';\nimport Question from './Question';\nimport Search from './Search';\n\nclass QuestionView extends Component {\n  constructor() {\n    super();\n\n    this.getCategories = () => {\n      fetch('/categories', {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json;charset=utf-8'\n        }\n      }).then(res => res.json()).then(({\n        categories\n      }) => {\n        this.setState({\n          categories\n        });\n      }).catch(error => {\n        alert('Unable to load categories. Please try your request again');\n        return;\n      });\n    };\n\n    this.getQuestions = () => {\n      fetch(\"/questions?page=\".concat(this.state.page), {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json;charset=utf-8'\n        }\n      }).then(res => res.json()).then(({\n        questions,\n        totalQuestions,\n        currentCategory\n      }) => {\n        this.setState({\n          questions: questions,\n          totalQuestions: totalQuestions,\n          currentCategory: currentCategory\n        });\n      }).catch(error => {\n        alert('Unable to load questions. Please try your request again');\n        return;\n      });\n    };\n\n    this.getByCategory = id => {\n      fetch(\"/categories/\".concat(id, \"/questions\"), {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json;charset=utf-8'\n        }\n      }).then(res => res.json()).then(({\n        questions,\n        totalQuestions,\n        currentCategory\n      }) => {\n        this.setState({\n          questions: questions,\n          totalQuestions: totalQuestions,\n          currentCategory: currentCategory\n        });\n      }).catch(error => {\n        alert('Unable to load questions. Please try your request again');\n        return;\n      });\n    };\n\n    this.submitSearch = searchTerm => {\n      fetch(\"/questions/search\", {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json;charset=utf-8'\n        },\n        body: JSON.stringify({\n          searchTerm: searchTerm\n        })\n      }).then(res => res.json()).then(({\n        questions,\n        totalQuestions,\n        currentCategory\n      }) => {\n        this.setState({\n          questions: questions,\n          totalQuestions: totalQuestions,\n          currentCategory: currentCategory\n        });\n      }).catch(error => {\n        alert('Unable to load questions. Please try your request again');\n        return;\n      });\n    };\n\n    this.questionAction = id => action => {\n      if (action === 'DELETE') {\n        if (window.confirm('are you sure you want to delete the question?')) {\n          fetch(\"/questions/\".concat(id), {\n            method: 'DELETE',\n            headers: {\n              'Content-Type': 'application/json;charset=utf-8'\n            }\n          }).then(() => {\n            this.getQuestions();\n          }).catch(error => {\n            alert('Unable to load questions. Please try your request again');\n            return;\n          });\n        }\n      }\n    };\n\n    this.state = {\n      questions: [],\n      page: 1,\n      totalQuestions: 0,\n      categories: [],\n      currentCategory: null\n    };\n  }\n\n  componentDidMount() {\n    this.getQuestions();\n    this.getCategories();\n  }\n\n  selectPage(num) {\n    this.setState({\n      page: num\n    }, () => this.getQuestions());\n  }\n\n  createPagination() {\n    let pageNumbers = [];\n    let maxPage = Math.ceil(this.state.totalQuestions / 10);\n\n    for (let i = 1; i <= maxPage; i++) {\n      pageNumbers.push(React.createElement(\"span\", {\n        key: i,\n        className: \"page-num \".concat(i === this.state.page ? 'active' : ''),\n        onClick: () => {\n          this.selectPage(i);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, i));\n    }\n\n    return pageNumbers;\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      className: \"question-view\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"categories-list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      onClick: this.getQuestions,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, \"Categories\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, this.state.categories.map(({\n      id,\n      type\n    }) => React.createElement(\"li\", {\n      key: id,\n      onClick: () => {\n        this.getByCategory(id);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      className: \"category\",\n      alt: \"category-\".concat(type.toLowerCase()),\n      src: \"\".concat(type.toLowerCase(), \".svg\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }), type)))), React.createElement(\"div\", {\n      className: \"questions-list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, \"Questions\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, React.createElement(Search, {\n      submitSearch: this.submitSearch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      class: \"question-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, !_.isEmpty(this.state.categories) && this.state.questions.map(q => {\n      return React.createElement(Question, {\n        key: q.id,\n        question: q.question,\n        answer: q.answer,\n        category: this.state.categories.find(c => c.id === q.category)['type'],\n        difficulty: q.difficulty,\n        questionAction: this.questionAction(q.id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      });\n    })), React.createElement(\"div\", {\n      className: \"pagination-menu\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, this.createPagination()))));\n  }\n\n}\n\nexport default QuestionView;","map":{"version":3,"sources":["C:\\Users\\3nwan\\Documents\\GitHub\\FSND\\projects\\02_trivia_api\\starter\\frontend\\src\\components\\QuestionView.js"],"names":["_","React","Component","Question","Search","QuestionView","constructor","getCategories","fetch","method","headers","then","res","json","categories","setState","catch","error","alert","getQuestions","state","page","questions","totalQuestions","currentCategory","getByCategory","id","submitSearch","searchTerm","body","JSON","stringify","questionAction","action","window","confirm","componentDidMount","selectPage","num","createPagination","pageNumbers","maxPage","Math","ceil","i","push","render","map","type","toLowerCase","isEmpty","q","question","answer","find","c","category","difficulty"],"mappings":"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","sourcesContent":["import _ from 'lodash';\r\nimport React, { Component } from 'react';\r\nimport '../stylesheets/App.css';\r\nimport Question from './Question';\r\nimport Search from './Search';\r\n\r\n\r\nclass QuestionView extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      questions: [],\r\n      page: 1,\r\n      totalQuestions: 0,\r\n      categories: [],\r\n      currentCategory: null,\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getQuestions();\r\n    this.getCategories();\r\n  }\r\n\r\n  getCategories = () => {\r\n    fetch('/categories', {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json;charset=utf-8'\r\n      },\r\n    }).then((res) => res.json())\r\n      .then(({ categories }) => {\r\n        this.setState({ categories });\r\n      }).catch((error) => {\r\n        alert('Unable to load categories. Please try your request again')\r\n        return;\r\n      })\r\n  }\r\n\r\n  getQuestions = () => {\r\n    fetch(`/questions?page=${this.state.page}`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json;charset=utf-8'\r\n      },\r\n    }).then((res) => res.json())\r\n      .then(({ questions, totalQuestions, currentCategory }) => {\r\n        this.setState({\r\n          questions: questions,\r\n          totalQuestions: totalQuestions,\r\n          currentCategory: currentCategory\r\n        })\r\n      }).catch((error) => {\r\n        alert('Unable to load questions. Please try your request again')\r\n        return;\r\n      })\r\n  }\r\n\r\n  selectPage(num) {\r\n    this.setState({ page: num }, () => this.getQuestions());\r\n  }\r\n\r\n  createPagination() {\r\n    let pageNumbers = [];\r\n    let maxPage = Math.ceil(this.state.totalQuestions / 10)\r\n    for (let i = 1; i <= maxPage; i++) {\r\n      pageNumbers.push(\r\n        <span\r\n          key={i}\r\n          className={`page-num ${i === this.state.page ? 'active' : ''}`}\r\n          onClick={() => { this.selectPage(i) }}>{i}\r\n        </span>)\r\n    }\r\n    return pageNumbers;\r\n  }\r\n\r\n  getByCategory = (id) => {\r\n    fetch(`/categories/${id}/questions`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json;charset=utf-8'\r\n      },\r\n    }).then((res) => res.json())\r\n      .then(({ questions, totalQuestions, currentCategory }) => {\r\n        this.setState({\r\n          questions: questions,\r\n          totalQuestions: totalQuestions,\r\n          currentCategory: currentCategory\r\n        })\r\n      }).catch((error) => {\r\n        alert('Unable to load questions. Please try your request again')\r\n        return;\r\n      })\r\n  }\r\n\r\n  submitSearch = (searchTerm) => {\r\n    fetch(`/questions/search`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json;charset=utf-8'\r\n      },\r\n      body: JSON.stringify({ searchTerm: searchTerm }),\r\n    }).then((res) => res.json())\r\n      .then(({ questions, totalQuestions, currentCategory }) => {\r\n        this.setState({\r\n          questions: questions,\r\n          totalQuestions: totalQuestions,\r\n          currentCategory: currentCategory\r\n        })\r\n      }).catch((error) => {\r\n        alert('Unable to load questions. Please try your request again')\r\n        return;\r\n      })\r\n  }\r\n\r\n  questionAction = (id) => (action) => {\r\n    if (action === 'DELETE') {\r\n      if (window.confirm('are you sure you want to delete the question?')) {\r\n        fetch(`/questions/${id}`, {\r\n          method: 'DELETE',\r\n          headers: {\r\n            'Content-Type': 'application/json;charset=utf-8'\r\n          },\r\n        })\r\n          .then(() => {\r\n            this.getQuestions();\r\n          }).catch((error) => {\r\n            alert('Unable to load questions. Please try your request again')\r\n            return;\r\n          })\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <>\r\n        <div className=\"question-view\">\r\n          <div className=\"categories-list\">\r\n            <h2 onClick={this.getQuestions}>Categories</h2>\r\n            <ul>\r\n\r\n              {this.state.categories.map(({ id, type }) => (\r\n                <li key={id} onClick={() => { this.getByCategory(id) }}>\r\n                  <img className=\"category\" alt={`category-${type.toLowerCase()}`} src={`${type.toLowerCase()}.svg`} />\r\n                  {type}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n          <div className=\"questions-list\">\r\n            <h2>Questions</h2>\r\n            <div>\r\n              <Search submitSearch={this.submitSearch} />\r\n            </div>\r\n            <div class=\"question-container\">\r\n              {!_.isEmpty(this.state.categories) && this.state.questions.map((q) => {\r\n                return (\r\n                  <Question\r\n                    key={q.id}\r\n                    question={q.question}\r\n                    answer={q.answer}\r\n                    category={this.state.categories.find((c) => c.id === q.category)['type']}\r\n\r\n                    difficulty={q.difficulty}\r\n                    questionAction={this.questionAction(q.id)}\r\n                  />\r\n                )\r\n              })}\r\n            </div>\r\n            <div className=\"pagination-menu\">\r\n              {this.createPagination()}\r\n            </div>\r\n          </div>\r\n\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default QuestionView;"]},"metadata":{},"sourceType":"module"}